// 题目描述，把每个带括号部分用双引号包围拼接字符串
// 然后把每个双引号里头的最外层括号删除拼接为最后结果

/*例如：
输入：s = "(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"， // 把每个带括号部分用双引号包围拼接字符串
删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。 // 把每个双引号里头的最外层括号删除拼接
*/
var removeOuterParentheses = function (S) {
  let count = 0,
    ans = ""
  for (let i = 0; i < S.length; i++) {
    if (S[i] === "(" && count++ > 0) ans += "(" // 比较后再进行运算操作
    if (S[i] === ")" && count-- > 1) ans += ")"
  }
  return ans
}

console.log(removeOuterParentheses("(()())(())"))
// https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/ji-shu-fa-shan-chu-zui-wai-ceng-de-gua-h-55id/

/*
遇到左括号计数器 +1，如果当前计数值（加之前）大于 0 （说明前面已经有一个属于他的最外层左括号），则属于有效的左括号。
遇到右括号计数器 -1，如果当前计数值（减之前）大于 1 （说明这个右括号前面已经有一个属于他的最外层左括号和它对应的左括号），则属于有效的右括号。
*/

// (()())这段执行完进去新的外层，计时器会归零

// 1、( count = 0 左括号 不加进到ant， count =1
// 2、( count = 1 > 0, （说明前面已经有一个属于他的最外层左括号），则属于有效的左括号， count+1 = 2
// 3、）count = 2 > 1, （说明前面有多个左括号,肯定有一个他对应的），则他属于有效的右括号， count-1 = 1
// 4、重复2，3 一起驾到ant
// 4、count = 1,碰到右括号,说明前面只有一个左括号是他对应的，所以这个右括号无效