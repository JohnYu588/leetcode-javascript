// 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
// 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
// 问总共有多少条不同的路径？

// 输入：m = 3, n = 2
// 输出：3
// 解释：
// 从左上角开始，总共有 3 条路径可以到达右下角。
// 1. 向右 -> 向下 -> 向下
// 2. 向下 -> 向下 -> 向右
// 3. 向下 -> 向右 -> 向下

var uniquePaths = function (m, n) {
  const f = new Array(m).fill(0).map(() => new Array(n).fill(0))
  for (let i = 0; i < m; i++) {
    f[i][0] = 1
  }
  for (let j = 0; j < n; j++) {
    f[0][j] = 1
  }
  //   [1,1]
  //   [1,0]
  //   [1,0]
  for (let i = 1; i < m; i++) {
    // 从1开始，防止边界情况，保证i-1>0,j-1>0;而且我们本身也要从 1-1 === 0 开始算起
    // 并且 f[0][1]，f[0][2],f[0][3]...
    // f[1][0],f[2][0],f[3][0]...的值均为1，
    // 因为只能往下或者往右，从[0][0]往右走或者往下走不管多远都只有一种方案
    for (let j = 1; j < n; j++) {
      f[i][j] = f[i - 1][j] + f[i][j - 1]
    }
  }
  //   [1,1]
  //   [1,2] 2=1+1
  //   [1,3] 3=2+1
  // 二维数组最后一个节点坐标
  return f[m - 1][n - 1]
}

uniquePaths(3, 2)

// 链接：https://leetcode.cn/problems/unique-paths/solution/bu-tong-lu-jing-by-leetcode-solution-hzjf/
// 用 f(i, j)表示从左上角走到 (i, j)的路径数量;取值范围 => i:[0, m) 和 j:[0, n)
// (i, j)会从 (i-1, j) 或者 (i, j-1) 走过来。因此我们可以写出动态规划转移方程：
// f(i, j) = f(i-1, j) + f(i, j-1)

// 需要注意的是，如果 i=0，那么 f(i-1,j) 并不是一个满足要求的状态，我们需要忽略这一项；
// 同理，如果 j=0.那么 f(i,j-1) 并不是一个满足要求的状态，我们需要忽略这一项。

// 初始条件为 f(0,0)=1，即从左上角走到左上角有一种方法。
// 最终的答案即为 f(m-1,n-1)
// 为了方便代码编写，我们可以将所有的 f(0, j) 以及 f(i, 0)都设置为边界条件，它们的值均为 1。

// https://leetcode.cn/problems/unique-paths/solution/javascriptjs-dong-tai-gui-hua-nei-cun-yo-ufc6/
