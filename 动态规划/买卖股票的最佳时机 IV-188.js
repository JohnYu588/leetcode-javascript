const maxProfit = (k, prices) => {
  if (prices == null || prices.length < 2 || k == 0) {
    return 0
  }
  let dp = Array.from(Array(prices.length), () => Array(2 * k + 1).fill(0)) // 5行5列【2 * k + 1买入卖出的总次数】的二维数组
  for (let j = 1; j < 2 * k; j += 2) {
    dp[0][j] = -prices[0]
  }
  for (let i = 1; i < prices.length; i++) {
    for (let j = 0; j < 2 * k; j += 2) {
      // 这里要类比j为奇数是买，偶数是卖的状态。
      dp[i][j + 1] = Math.max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i]) // 第i天没有操作和第i天买入股票选最大
      dp[i][j + 2] = Math.max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i]) // 第i天没有操作和第i天卖出股票选最大
    }
  }
  // 最后一次卖出，一定是利润最大的，dp[prices.size() - 1][2 * k]即红色部分就是最后求解
  return dp[prices.length - 1][2 * k]
}
console.log(maxProfit(2, [3, 2, 6, 5, 0, 3])) // 7
// [0, -3, 0, -3, 0]
// [0, 0, 0, 0, 0]
// [0, 0, 0, 0, 0]
// [0, 0, 0, 0, 0]
// [0, 0, 0, 0, 0]
// [0, 0, 0, 0, 0]

// 状态j:不操作 买入 卖出 买入 卖出 (总共买卖次数)
// 股票
//  3 [0, -3, 0, -3, 0] 0 买入状态：第i天没有操作和第i天买入股票选最大 卖出状态：第i天没有操作和第i天卖出股票选最大
//  2 [0, -2, 0, -2, 0] 0 max(-3,0-2) max(0,-3+2) max(-3,0-2) max(0,-3+2)
//  6 [0, -2, 4, -2, 4] 0 max(-2,0-6) max(0,-2+6) max(-2,0-6) max(0,-2+6)
//  5 [0, -2, 4, -1, 4] 0 max(-2,0-5) max(4,-2+5) max(-2,4-5) max(4,-2+5)
//  0 [0, 0, 4, 4, 4] 0 max(-2,0-0) max(4,-2+0) max(-1,4-0) max(4,-1+0)
//  3 [0, 0, 4, 4, 7] 0 max(0,0-3) max(4,0+3) max(4,4-3) max(4,4+3)

// https://programmercarl.com/0188.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC

/*  题目：
 给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。
 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 示例 1：
 输入：k = 2, prices = [2,4,1]
 输出：2
 解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
 示例 2：
 输入：k = 2, prices = [3,2,6,5,0,3]
 输出：7
 解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
      随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。
 https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/
 */
